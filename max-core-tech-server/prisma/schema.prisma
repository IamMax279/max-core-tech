// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id BigInt @id @default(autoincrement())
  firstName String
  lastName String
  email String @unique
  password String
  verified Boolean @default(false)
  isAdmin Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address UserAddresses[]
  orders Order[]

  @@map("users")
}

model UserAddresses {
  id BigInt @id @default(autoincrement())
  userId BigInt
  street String
  apt String
  unit String
  phone String
  zipCode String
  city String
  isTemporary Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
  user User @relation(fields: [userId], references: [id])

  @@map("user_addresses")
}

model Product {
  id BigInt @id @default(autoincrement())
  name String @unique
  price Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id BigInt @id @default(autoincrement())
  userId BigInt
  addressId BigInt
  status String @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  address UserAddresses @relation(fields: [addressId], references: [id])
  items OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id BigInt @id @default(autoincrement())
  orderId BigInt
  productId BigInt
  quantity Int
  unitPrice Float

  order Order @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}